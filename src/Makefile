#
# Fortran compiler
#
F90 = gfortran

#
# archiver
#
AR = ar

#
# lapack flag, optional:
# if not provided, local copy will be compiled (not optimized).
#
LIBLAPACK?= -llapack


#=======================
#
# compilation flags
#
FFLAGS =  -fcheck=bounds -ffree-line-length-512 -fPIC -cpp -Ofast -march=native -ffast-math -funroll-loops
#FFLAGS = -fcheck=bounds -ffree-line-length-512 -fPIC -cpp -O0
#FFLAGS += -g -DDEBUG -pedantic -std=f2008

# absolute path of this Makefile
SRC := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))
OBJ = $(SRC)/Obj
LIBOUT = $(realpath $(SRC)/../lib)

MOD = -I$(OBJ) -J$(OBJ)



# Produced filenames
#
IRALIB = libira.a
SHLIB  = libira.so


# object files
#
# utils
futils := \
	$(SRC)/ira_precision.f90 \
	$(SRC)/timer.f90 \
	$(SRC)/sofi_tools.f90 \
	$(SRC)/err_module.f90 \
	$(SRC)/version.f90 \
	$(SRC)/sorting_module.f90 \
	$(SRC)/set_candidate.f90 \
	$(SRC)/cshda.f90 \
	$(SRC)/ira_routines.f90 \
	$(SRC)/sofi_routines.f90

outils:= $(patsubst $(SRC)%,$(OBJ)%,$(futils:%.f90=%.o))

ifndef LIBLAPACK
outils:=$(OBJ)/lap.o $(outils)
endif



flib := $(SRC)/library_ira.f90 \
	$(SRC)/library_sofi.f90
olib := $(patsubst $(SRC)%,$(OBJ)%,$(flib:%.f90=%.o))


default: msg
all : lib shlib

# rules
$(OBJ)/%.o: $(SRC)/%.f90
	$(F90) $(FFLAGS) $(MOD) -c $^ -o $@

# local lapack file if needed (keep -O0 to be sure)
$(OBJ)/lap.o: $(SRC)/../lap_local/lap.f
	$(F90) $(MOD) -c -fPIC -O0 -funroll-loops -g $^ -o $@



lib: $(OBJ) $(IRALIB)
shlib: $(OBJ) $(SHLIB)

#
# object folder
#
$(OBJ):
	@if [ ! -d $(OBJ) ]; then mkdir $(OBJ) ; fi
$(LIBOUT):
	@if [ ! -d $(LIBOUT) ]; then mkdir $(LIBOUT) ; fi


#====
# pack the library
#====
$(IRALIB): $(outils) $(olib)
	$(AR) -rcv $(LIBOUT)/$@ $^
	@ln -sf $(LIBOUT)/$@ .

#====
# pack the shared library
#====
$(SHLIB): $(outils) $(olib)
	$(F90) -o $(LIBOUT)/$@ -shared $(MOD) $^ $(FFLAGS) $(LIBLAPACK) -Wl,-soname,libira.so
	@ln -sf $(LIBOUT)/$@ .

msg:
	@echo 'Use one of the following:'
	@echo ''
	@echo ' make lib     -> compiles the $(IRALIB) library'
	@echo ' make shlib   -> compiles the $(SHLIB) shared library'
	@echo ' make all     -> all of the above'
	@echo ''
	@echo ' make clean   -> remove all files generated by make'
	@echo ''
	@echo 'Quitting.'




clean:
	rm -rf $(IRALIB) $(SHLIB)
	rm -rf $(OBJ)


